# IaC IoT resources deployment template

parameters:
- name: artifactName
  type: string
- name: bastionHostName
  type: string
- name: edgeDeviceId
  type: string
  default: 'vm-edge'
- name: edgeVmAdminUsername
  type: string
- name: edgeVmName
  type: string
- name: environment
  type: string
- name: iotHubName
  type: string
- name: keyVaultName
  type: string
- name: projectName
  type: string
- name: resourceGroupLocation
  type: string
- name: resourceGroupName
  type: string
- name: serviceConnection
  type: string
- name: virtualNetworkName
  type: string

jobs:
- deployment: deploy_edge_vm_resources
  displayName: Deploy Edge VM Resources
  dependsOn: deploy_iot_resources
  environment: ${{ parameters.environment }}
  variables:
    # jobEnvironment is needed for the condition checks on creating a VM.
    # For some reason parameters don't get substituted if they are passed
    # in as a variable instead of hard coded but variables do substitute
    jobEnvironment: ${{ parameters.environment }}
    # Variables set by 'Generate ssh key' task
    kvSshPrivateKeySecretName: 'edgeVmPrivateKey'
    kvSshPublicKeySecretName: 'edgeVmPublicKey'
  strategy:
    runOnce:
      deploy:
        steps:
        - task: AzureCLI@2
          displayName: 'Check if VM already exists'
          condition: and(succeeded(), eq(variables.jobEnvironment, 'dev'))
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              export vmdetails=$(az vm list -g ${{ parameters.resourceGroupName }} --query "[?name=='${{ parameters.edgeVmName }}']" -o tsv)
              if [ -z "$vmdetails" ]
              then
                  echo "##vso[task.setvariable variable=vmExists]false"
              else
                  echo "##vso[task.setvariable variable=vmExists]true"
              fi
            failOnStandardError: true

        - task: AzureCLI@2
          displayName: 'Create edge device in IoT Hub'
          condition: and(succeeded(), eq(variables.jobEnvironment, 'dev'), eq(variables.vmExists, false))
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Piping to std error to dev null because it prints error if extension is already installed
              az extension add --name azure-iot 2>/dev/null
              AZURE_EXTENSION_USE_DYNAMIC_INSTALL=yes_without_prompt

              # Create device and update tags
              az iot hub device-identity create -d ${{ parameters.edgeDeviceId }} -n ${{ parameters.iotHubName }} --edge-enabled
              az iot hub device-twin update -d ${{ parameters.edgeDeviceId }} -n ${{ parameters.iotHubName }} --tags '{"environment": "${{ parameters.environment }}", "lva": "true", "simulator": "true", "inferencingService": "yolov3", "businessLogic": "objectDetection", "gpu": "false"}'

              # Get connection string and set as build pipeline variable
              export deviceConnectionString=$(az iot hub device-identity connection-string show -d ${{ parameters.edgeDeviceId }} -n ${{ parameters.iotHubName }} -o tsv)
              echo "##vso[task.setvariable variable=deviceConnectionString;issecret=true]$deviceConnectionString"
            failOnStandardError: true

        - task: AzureCLI@2
          displayName: 'Generate ssh keys'
          condition: and(succeeded(), eq(variables.jobEnvironment, 'dev'), eq(variables.vmExists, false))
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Generate ssh
              echo -e 'y' | ssh-keygen -f rsa -N ""

              # Store ssh keys in Azure KV
              az keyvault secret set -n $(kvSshPrivateKeySecretName) -f rsa --vault-name ${{ parameters.keyVaultName }} -o none
              az keyvault secret set -n $(kvSshPublicKeySecretName) -f rsa.pub --vault-name ${{ parameters.keyVaultName }} -o none
            failOnStandardError: true

        - task: AzureCLI@2
          displayName: 'Deploy VNet & Bastion'
          condition: and(succeeded(), eq(variables.jobEnvironment, 'dev'), eq(variables.vmExists, false))
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Deploy VNet and Bastion Resources
              az deployment group create -f $(Pipeline.Workspace)/${{ parameters.artifactName }}/bicep/main.network.bicep \
                -g ${{ parameters.resourceGroupName }} --parameters \
                location=${{ parameters.resourceGroupLocation }} \
                projectName=${{ parameters.projectName }} \
                environmentName=${{ parameters.environment }} \
                virtualNetworkName=${{ parameters.virtualNetworkName }} \
                bastionHostName=${{ parameters.bastionHostName }}
            failOnStandardError: true

        - task: AzureCLI@2
          displayName: 'Deploy IoT Edge VM'
          condition: and(succeeded(), eq(variables.jobEnvironment, 'dev'), eq(variables.vmExists, false))
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: 'bash'
            scriptLocation: 'scriptPath'
            scriptPath: '$(Pipeline.Workspace)/${{ parameters.artifactName }}/scripts/deployEdgeVM.sh'
            arguments: '-e ${{ parameters.environment }}
                        -p ${{ parameters.projectName }}
                        -r ${{ parameters.resourceGroupName }}
                        -v ${{ parameters.edgeVmName }}
                        -n ${{ parameters.virtualNetworkName }}
                        -a "ssh"
                        -u ${{ parameters.edgeVmAdminUsername }}
                        -k $(System.DefaultWorkingDirectory)/rsa.pub
                        -d $(deviceConnectionString)
                        -f $(Pipeline.Workspace)/${{ parameters.artifactName }}/scripts/cloud-config.yml'
            failOnStandardError: true
