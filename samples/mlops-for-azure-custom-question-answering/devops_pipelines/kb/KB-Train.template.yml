parameters:
  - name: 'pool'
    default: 'windows-latest'
  - name: 'lang'
    default: ''
  - name: 'kbfilename'
    default: ''
  - name: 'testFile'
    default: ''

stages:
  - stage: trainTest
    displayName: 'KB Train and Accuracy Test for ${{ parameters.lang }}'
    jobs:
    - job: trainTest
      displayName: 'KB Train and Accuracy Test'
      pool:
        vmImage: ${{ parameters.pool }}
      variables:
      - group: QNA_EDIT_SETTINGS
      - group: ACCURACY_TEST_SETTINGS
      - group: STORAGE_SETTINGS
      steps:  

      # Prepare Python and retrieve Config Values
      - template: ../python-job-prep.template.yml
        parameters:
          lang: ${{ parameters.lang }}
      
      # Publish current KB in Test slot on to be tested system (QA)
      - script: |
          python kb/scripts/publish-kb.py --publish_only
        displayName: 'Publish KB'
        workingDirectory: $(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering
        env:
          PYTHONPATH: $(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering
          QNA_DEST_ENDPOINT: $(QNA_ENDPOINT_HOST)
          QNA_DEST_SUB_KEY: $(QNA_ENDPOINT_KEY)
          QNA_DEST_KB_ID: $(QNA_KB_ID)
      
       # Additional configuration for Accuracy Test
      - bash: |
          LANG_UPPER=$(echo ${{ parameters.lang }} | tr [:lower:] [:upper:])
          ARTIFACT_NAME="KB_${LANG_UPPER}_$(Build.BuildNumber)"
          echo "##vso[task.setvariable variable=ARTIFACT_NAME;isOutput=true]$ARTIFACT_NAME"
        name: addConfig
        displayName: 'Additional Configuration'

      # Prepare Accuracy Tool requirements
      - bash: |
          npm install 
        workingDirectory: $(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering/accuracy_test/
        displayName: 'NPM Install'
      
      # Run Accuracy Tool
      - bash: |
          mkdir output
          npm run build
          npm run start
          npm run test:report
        workingDirectory: $(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering/accuracy_test/
        displayName: 'Run Accuracy tests'
        env:
          QNA_ENDPOINT_HOST_NAME: $(QNA_ENDPOINT_HOST)
          QNA_ENDPOINT_KEY: $(QNA_ENDPOINT_KEY)
          QNA_KNOWLEDGEBASE_ID: $(QNA_KB_ID)
          TOP_ANSWER: $(TOP_ANSWER)
          TOP_PROMPT: $(TOP_PROMPT)
          SCORE_THRESHOLD: $(SCORE_THRESHOLD)
          SCORE_SIMILARITY: $(SCORE_SIMILARITY)
          MULTI_TURN_DEPTH: $(MULTI_TURN_DEPTH)
          PRECISE_ANSWERING: $(PRECISE_ANSWERING)
          TEST_FILE: ${{ parameters.testFile }}
          OUTPUT_FILE: 'output/out.tsv' # because fixed input value in package.json

      # Publish Accuracy Tool JUnit test result
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '$(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering/accuracy_test/output/test-report.xml'
          testRunTitle: 'QnA Maker Accuracy Tests'
          failTaskOnFailedTests: false
        displayName: 'Publish test results'

      # Upload TestData/TestResult to Storage
      - bash: |
          az storage blob upload --container-name mlops \
                          --file ${{ parameters.testFile }} \
                          --name $(addConfig.ARTIFACT_NAME)/test_input.tsv

          az storage blob upload --container-name mlops \
                          --file output/out.tsv \
                          --name $(addConfig.ARTIFACT_NAME)/accuracy_test_result.tsv

          az storage blob upload --container-name mlops \
                          --file output/test-report.xml \
                          --name $(addConfig.ARTIFACT_NAME)/test-report.xml

        workingDirectory: $(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering/accuracy_test/
        displayName: 'Upload TestData & Results to Azure Storage'
        env:
          AZURE_STORAGE_SAS_TOKEN: $(AZURE_STORAGE_SAS_TOKEN)
          AZURE_STORAGE_ACCOUNT: $(AZURE_STORAGE_ACCOUNT)

      - bash: |
          TESTS=$(sed -rn 's/.*tests="([^"]*)".*/\1/p' output/test-report.xml)
          FAILURES=$(sed -rn 's/.*failures="([^"]*)".*/\1/p' output/test-report.xml)
          SUCCESS_RATE=$(node -e "console.log(100-100/$TESTS*$FAILURES)") && echo $SUCCESS_RATE
          IS_SUCCESS=$(node -e "console.log($SUCCESS_RATE >= $THRESHOLD)") && echo $IS_SUCCESS
          echo "$TESTS/$FAILURES, $THRESHOLD/$SUCCESS_RATE, $IS_SUCCESS"

          if [ $IS_SUCCESS = true ]; then
              echo "SUCCESS!!"
          else
              echo "FAIL!!"
              exit 1;
          fi
        workingDirectory: $(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering/accuracy_test/
        failOnStderr: true
        displayName: 'Check threshold'          
        env:
          THRESHOLD: $(TEST_FAIL_THRESHOLD)

  - stage: artifactPrep
    displayName: 'Prepare KB (${{ parameters.lang }}) for Transmission'
    jobs:
    - job: artifactPrep
      displayName: 'Store KB as artifact'
      pool:
        vmImage: ${{ parameters.pool }}
      variables:
      - group: QNA_EDIT_SETTINGS
      - group: STORAGE_SETTINGS
      steps:

      # Prepare Python and retrieve Config Values
      - template: ../python-job-prep.template.yml
        parameters:
          lang: ${{ parameters.lang }}

      # Additional configuration for uploadArtifact
      - bash: |
          LANG_UPPER=$(echo ${{ parameters.lang }} | tr [:lower:] [:upper:])
          ARTIFACT_NAME="KB_${LANG_UPPER}_$(Build.BuildNumber)"
          echo "##vso[task.setvariable variable=ARTIFACT_NAME;isOutput=true]$ARTIFACT_NAME"
        name: addConfig
        displayName: 'Additional Configuration'

      # Download KB from EDIT environment
      - script: |
          python kb/scripts/download-kb.py --output ${{ parameters.kbfilename }} --slot Test
        displayName: 'Download KB'
        workingDirectory: $(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering
        env:
          PYTHONPATH: $(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering
          QNA_SOURCE_ENDPOINT: $(QNA_ENDPOINT_HOST)
          QNA_SOURCE_SUB_KEY: $(QNA_ENDPOINT_KEY)
          QNA_SOURCE_KB_ID: $(QNA_KB_ID)

      # Create Azure DevOps Artifact
      - publish: $(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering/${{ parameters.kbfilename }}
        artifact: $(addConfig.ARTIFACT_NAME)

      # Upload KB to Storage
      - bash: |
          az storage blob upload --container-name mlops \
                          --file ${{ parameters.kbfilename }} \
                          --name $(addConfig.ARTIFACT_NAME)/${{ parameters.kbfilename }}
        displayName: 'Upload to Azure Storage'
        workingDirectory: $(System.DefaultWorkingDirectory)/samples/mlops-for-azure-custom-question-answering
        env:
          AZURE_STORAGE_SAS_TOKEN: $(AZURE_STORAGE_SAS_TOKEN)
          AZURE_STORAGE_ACCOUNT: $(AZURE_STORAGE_ACCOUNT)